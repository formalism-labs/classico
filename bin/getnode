#!/usr/bin/env python

import sys
import os
import argparse
from pathlib import Path
import re
import tempfile
import shutil
import urllib.request

HERE = os.path.dirname(__file__)
ROOT = os.path.abspath(os.path.join(HERE, ".."))
import paella

NODE_VERSION = "24"

#----------------------------------------------------------------------------------------------

class NodeSetup(paella.Setup):
    def __init__(self, args):
        paella.Setup.__init__(self, nop=args.nop)

    def common_first(self):
        self.install("nodejs npm")
        self.run("npm install -g corepack@latest")
        self.run("corepack enable; corepack prepare yarn@stable --activate")
        self.run("npm install -g --force pnpm@latest-10")

#----------------------------------------------------------------------------------------------

class ModernSetup(paella.Setup):
    def __init__(self, args):
        paella.Setup.__init__(self, nop=args.nop)

    def common_first(self):
        self.install_downloaders()
        
        self.run("mkdir -p $HOME/.fnm")
        self.run("curl -fsSL https://fnm.vercel.app/install | bash -s -- --skip-shell")
        self.cat_to_profile_d(r'''
            prepend_to_path "{HOME}/.fnm"
            eval "$(fnm env)"
            '''.format(HOME=Path.home()), "node.sh")
        self.run(f"fnm use --install-if-missing {NODE_VERSION}")
        self.run("corepack enable; corepack prepare yarn@stable --activate")
        self.run("npm install -g --force pnpm@latest")

#----------------------------------------------------------------------------------------------

class BunSetup(paella.Setup):
    def __init__(self, args):
        paella.Setup.__init__(self, nop=args.nop)

    def common_first(self):
        self.install_downloaders()

        self.run("curl -fsSL https://bun.sh/install | SHELL=none bash")
        self.cat_to_profile_d(r'''
            export BUN_INSTALL="{HOME}/.bun"
            append_to_path $BUN_INSTALL/bin
            '''.format(HOME=Path.home()), "bun.sh")
        home = Path.home()
        jasmine_dir = f"{home}/.jasmine/"
        paella.mkdir_p(jasmine_dir)
        shutil.copy(f"{ROOT}/jasmine/package.json", jasmine_dir)
        shutil.copy(f"{ROOT}/jasmine/bun.lock", jasmine_dir)
        self.run("bun install", at=jasmine_dir)

#----------------------------------------------------------------------------------------------

class VoltaSetup(paella.Setup):
    def __init__(self, args):
        paella.Setup.__init__(self, nop=args.nop)

    def common_first(self):
        self.install_downloaders()

        self.run("curl https://get.volta.sh | bash -s -- --skip-setup")
        self.cat_to_profile_d(r'''
            export VOLTA_HOME="$HOME/.volta"
            append_to_path $VOLTA_HOME/bin
            '''.format(HOME=Path.home()), "volta.sh")
        self.run(f"volta install node@{NODE_VERSION}")
        self.run("volta install yarn")

#----------------------------------------------------------------------------------------------

parser = argparse.ArgumentParser(description='Install node.js and related software')
parser.add_argument('-n', '--nop', action="store_true", help='No operation')
parser.add_argument('--modern', action="store_true", help='Install latest node.js')
parser.add_argument('--ts', action="store_true", help='Install TypeScript')
parser.add_argument('--volta', action="store_true", help='Install Volta')
parser.add_argument('--bun', action="store_true", help='Install Bun')
args = parser.parse_args()

if not args.volta:
    if args.modern:
        ModernSetup(args).setup()
    else:
        NodeSetup(args).setup()
else:
    VoltaSetup(args).setup()
    
if args.ts:
    self.run("npm install typescript -g --save-dev")

if args.bun:
    BunSetup(args).setup()

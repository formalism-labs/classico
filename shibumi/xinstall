
if [[ $(platform_os) == windows ]]; then

#----------------------------------------------------------------------------------------------

winget_install() {
	local packs="$@"
	for pack in "$packs"; do
		local pack
		runn winget install "$pack" --accept-package-agreements --silent
	done
}

choco_install() {
	local packs="$@"
	runn /c/ProgramData/chocolatey/bin/choco.exe install "$packs" -y --noprogress
}

scoop_install() {
	local packs="$@"
	runn $(cygpath -u $USERPROFILE)/scoop/shims/scoop install "$packs" --yes
}

xinstall_windows_native() {
	local packs="$@"
	
	if [[ $WINGET == 1 ]]; then
		if is_command winget; then
			winget_install "$packs"
		else
			eprint "winget is not available"
			return 1
		fi
	elif [[ $CHOCO == 1 ]]; then
		if is_command /c/ProgramData/chocolatey/bin/choco.exe; then
			choco_install "$packs"
		else
			eprint "choco is not available"
			return 1
		fi
	elif [[ $SCOOP == 1 ]]; then
		if is_command $(cygpath -u $USERPROFILE)/scoop/shims/scoop; then
			scoop_install "$packs"
		else
			eprint "scoop is not available"
			return 1
		fi
	else
		if is_command winget; then
			winget_install "$packs"
		elif is_command /c/ProgramData/chocolatey/bin/choco.exe; then
			choco_install "$packs"
		elif is_command $(cygpath -u $USERPROFILE)/scoop/shims/scoop; then
			scoop_install "$packs"
		else
			eprint "No package manager available"
			return 1
		fi
	fi
}

#----------------------------------------------------------------------------------------------

export -f winget_install choco_install scoop_install xinstall_windows_native

fi # windows

#----------------------------------------------------------------------------------------------

xinstall() {
	local packs="$@"

	if [[ $(platform_os) == windows ]]; then
		if [[ $NATIVE == 1 ]]; then
			xinstall_windows_native "$packs"
			return
		fi

		case $(platform_windows) in
			msys2)
				runn pacman --noconfirm --needed "$packs"
				;;
			cygwin)
				[[ -f /usr/local/bin/apt-cyg ]] && cp $CLASSICO/win/cygwin/apt-cyg /usr/local/bin/apt-cyg
				runn apt-cyg install "$packs"
				;;
			*)
				xinstall_windows_native "$packs"
				;;
		esac
		return
	fi

	if is_command apt-get; then
		export DEBIAN_FRONTEND=noninteractive
		if [[ $NO_UPDATE != 1 ]]; then
			local LAST_UPDATE="$(stat -c %Y /var/lib/apt/lists/*Release 2>/dev/null | sort -n | tail -n 1 || true)"
			local NOW="$(date +%s)"
			if [[ -z $LAST_UPDATE ]] || (( NOW - LAST_UPDATE > 86400 )); then
				runn $SUDO apt-get update -qq
			fi
		fi
		runn $SUDO apt-get install --fix-missing -y "$packs"
	elif is_command dnf; then
		runn $SUDO dnf install -y "$packs"
	elif is_command tdnf; then # mariner linux
		runn $SUDO tdnf install -y "$packs"
	elif is_command yum; then
		if [[ -f /etc/os-release ]]; then
			local DIST="$(source /etc/os-release; echo "${ID}${VERSION_ID}";)"
			if [[ $DIST == centos7 || $DIST == amzn2 ]]; then
				if grep -q -r "mirror.centos.org" "/etc/yum.repos.d/"; then
					# http://mirror.centos.org/centos/7/ is deprecated, so we have to disable mirrorlists
					# and change the baseurl in the repo file to the working mirror
					# from mirror.centos.org to vault.centos.org
					$SUDO sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo &> /dev/null || true
					$SUDO sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo &> /dev/null || true
					$SUDO sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo &> /dev/null || true
					runn $SUDO yum upgrade -y
				fi
			fi
		fi

		runn $SUDO yum install -y "$packs"
	elif is_command zypper; then
		runn $SUDO zypper install -y "$packs"
	elif is_command apk; then
		[[ $NO_UPDATE != 1 ]] && runn $SUDO apk update
		runn $SUDO apk add "$packs"
	elif is_command pacman; then
		[[ $NO_UPDATE != 1 ]] && runn $SUDO pacman --noprogressbar -Sy
		runn $SUDO pacman --noconfirm --noprogressbar -S "$packs"
	elif is_command brew; then
		[[ $NO_UPDATE == 1 ]] && export HOMEBREW_NO_AUTO_UPDATE=1
		for p in $packs; do
			runn "brew list $p &>/dev/null || brew install $p"
		done
	elif is_command pkg; then
		runn $SUDO pkg install -y "$packs"
	fi
}

#----------------------------------------------------------------------------------------------

pip_install() {
	local args=""
	if is_command uv; then
		[[ $CACHE == 0 ]] && args+=" --no-cache"
		runn uv pip install "$args" "$@"
	else
		[[ $CACHE == 0 ]] && args+=" --no-cache-dir"
		[[ -z $VIRTUAL_ENV ]] && args+=" --user"

		runn python -m pip install "$args" "$@"
	fi
}

#----------------------------------------------------------------------------------------------

export -f xinstall pip_install

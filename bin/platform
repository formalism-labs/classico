#!/usr/bin/env python

import sys
import os
import argparse

CLASSICO_PATH = os.path.realpath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.insert(0, CLASSICO_PATH)
import paella

parser = argparse.ArgumentParser(description='Report platform characteristics.')
parser.add_argument('-t', '--triplet', action="store_true", help='os-nick-arch triplet')
parser.add_argument('--os', action="store_true", help='Operating system')
parser.add_argument('--version', action="store_true", help='OS/Distribution version (deprecated: use --osver instead)')
parser.add_argument('--osver', action="store_true", help='OS/Distribution version')
parser.add_argument('--osfullver', action="store_true", help='OS/Distribution full version')
parser.add_argument('--build', action="store_true", help='Build number (applicable to Windows)')
parser.add_argument('--dist', action="store_true", help='Linux distribution (if applicable)')
parser.add_argument('--osnick', action="store_true", help='Term describing OS/distribution/version')
parser.add_argument('--arch', action="store_true", help='CPU Architecture')
parser.add_argument('--docker', action="store_true", help='Corresponding docker image')

parser.add_argument('--debian?', action="store_true", help='is Debian-like distribution?')
parser.add_argument('--redhat?', action="store_true", help='is Redhat-like distribution?')
parser.add_argument('--arch?', action="store_true", help='is Arch-like distribution?')
parser.add_argument('--container?', action="store_true", help='running in container?')
parser.add_argument('--conda?', action="store_true", help='Has Conda installer?') # TODO

parser.add_argument('--strict', action="store_true", help='Fail if cannot identify platform')
parser.add_argument('--brand', action="store_true", help='Display brand values') # TODO

parser.add_argument('--kernel', action="store_true", help='Kernel version (if applicable)')
parser.add_argument('--glibc', action="store_true", help='GLIBC version (if applicable)')
parser.add_argument('--libstdc++', action="store_true", help='libstdc++ version (if applicable)')

args = parser.parse_args()

try:
    platform = paella.Platform(strict=args.strict, brand=args.brand)
except:
    eprint("platform: cannot identify")
    exit(1)

if args.__dict__['debian?']:
    print(1 if platform.is_debian_compat() else 0)
    sys.exit(0)

if args.__dict__['redhat?']:
    print(1 if platform.is_redhat_compat() else 0)
    sys.exit(0)

if args.__dict__['container?']:
    print(1 if platform.is_container() else 0)
    sys.exit(0)

if args.__dict__['arch?']:
    print(1 if platform.is_arch_compat() else 0)
    sys.exit(0)

ret = []
if args.triplet:
    ret.append(platform.triplet())
if args.os:
    ret.append(platform.os)
if args.osnick:
    ret.append(str(platform.osnick))
if args.dist:
    ret.append(platform.dist)
if args.version or args.osver:
    ret.append(platform.os_ver)
if args.build and platform.build != "":
    ret.append(platform.build)
if args.osfullver:
    ret.append(platform.os_full_ver)
if args.arch:
    ret.append(platform.arch)
if args.docker:
    ret.append(platform.osnick.docker_image())
if args.kernel:
    pass
if args.glibc:
    pass
if ret == []:
    if platform.os == "windows":
        ret = [platform.dist, platform.os_ver, 'build', platform.build, 'on', platform.shell]
    else:
        ret.append(platform.os)
        if platform.dist:
            ret.append(platform.dist)
    if platform.osnick:
        ret.append(f"({str(platform.osnick)})")
    ret.append(platform.arch)
print(' '.join(str(x) for x in ret))

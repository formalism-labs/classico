
SHELL:=$(shell sh -c "command -v bash")

MAKE_MAJORVER:=$(shell echo "$(MAKE_VERSION)" | cut -d. -f1)
ifeq ($(MAKE_MAJORVER),3)
__:=$(error GNU Make version is too old. Aborting.)
endif

# ROOT determines:
# - location of BINROOT
# - location of Classico root
ifeq ($(ROOT),)
# __:=$(error ROOT is undefined)
ROOT ?= .
endif
override ROOT:=$(shell cd $(ROOT) && pwd)
export MK_ROOT:=$(ROOT)

ifneq ($(V),)
VERBOSE ?= $(V)
endif

ifneq ($(filter help,$(MAKECMDGOALS)),)
override HELP:=1
else ifeq ($(HELP),1)
MK_ALL_TARGETS:=help
endif

ifeq ($(CLASSICO),)
	ifneq ($(wildcard $(ROOT)/deps/classico),)
		CLASSICO:=$(ROOT)/deps/classico
	else ifneq ($(wildcard $(ROOT)/classico),)
		CLASSICO:=$(ROOT)/classico
	else ifneq ($(wildcard $(ROOT)/mk),)
		CLASSICO:=$(ROOT)
	else
		__:=$(error Cannot find Classico root)
	endif
else
	override CLASSICO:=$(shell cd $(CLASSICO) && pwd)
endif
export CLASSICO

export MK:=$(CLASSICO)/mk

define nobindir_check
ifeq ($(MK.$(1)),1)
MK.nobindir := 1
endif
endef

$(foreach env,docker,$(eval $(call nobindir_check,$(env))))

ifneq ($(shell { command -v python &> /dev/null; echo -n $$?; }),0)
__NO_PYTHON=1
endif

ifneq ($(HELP),1)
MK_ALL_TARGETS:=bindirs build
DEFAULT_TARGETS:=__sep bindirs
else
MK_ALL_TARGETS:=help
DEFAULT_TARGETS:=help
endif

SUDO:=$(shell [ $$( command -v sudo >/dev/null 2>&1; echo $$? ) = 0 ] && echo sudo)
USER:=$(shell whoami)

include $(MK)/functions
include $(MK)/common.defs
include $(MK)/term.defs
include $(MK)/cfg

ifneq ($(__NO_PYTHON),1)

include $(MK)/platform.defs

ifeq ($(OS),macos)
include $(MK)/macos.defs
endif

include $(MK)/git.defs
include $(MK)/variant.defs
include $(MK)/bindirs.defs
include $(MK)/nproc.defs

endif # __NO_PYTHON

MK.simple ?= 1

ifeq ($(MK.simple),1)
include $(MK)/defs
include $(MK)/rules
endif

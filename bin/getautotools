#!/usr/bin/env python

import sys
import os
import argparse
import tempfile

HERE = os.path.dirname(__file__)
ROOT = os.path.abspath(os.path.join(HERE, ".."))
sys.path.insert(0, ROOT)
import paella

AUTOCONF_VER = 'latest' # 2.72 last time I checked
AUTOMAKE_VER = '1.17'
LIBTOOL_VER = '2.5.4'

#----------------------------------------------------------------------------------------------

class SystemSetup(paella.Setup):
    def __init__(self, args):
        paella.Setup.__init__(self, nop=args.nop, verbose=args.verbose)
        self.modern = args.modern
        self.keep = args.keep
        self.os_ver = self.os_version[0]
        # self.prefix = f"{os.getenv('HOME')}/.local/opt"
        self.prefix = '/usr/local'

    def common_first(self):
        if not self.modern:
            self.install("m4 perl make")
        else:
            self.install("autoconf automake libtool make")

    def common_last(self):
        if not self.modern:
            return
        self.base_dir = tempfile.mkdtemp(prefix='autotools.')
        
        autoconf_tgz = paella.wget(f"https://ftp.gnu.org/gnu/autoconf/autoconf-{AUTOCONF_VER}.tar.gz",
                                   dest=f'{self.base_dir}/autoconf.tgz')
        automake_tgz = paella.wget(f"https://ftp.gnu.org/gnu/automake/automake-{AUTOMAKE_VER}.tar.gz",
                                   dest=f'{self.base_dir}/automake.tgz')
        libtool_tgz = paella.wget(f"https://ftp.gnu.org/gnu/libtool/libtool-{LIBTOOL_VER}.tar.gz",
                                   dest=f'{self.base_dir}/libtool.tgz')
        self.run(f'tar -C {self.base_dir} -xzf {autoconf_tgz}')
        self.run(f'tar -C {self.base_dir} -xzf {automake_tgz}')
        self.run(f'tar -C {self.base_dir} -xzf {libtool_tgz}')
        self.run(f"""
            cd {self.base_dir}
            mv autoconf-* autoconf
            mkdir -p build/autoconf
            cd build/autoconf
            ../../autoconf/configure --prefix="{self.prefix}"
            make -j
            """)
        self.run(f"""
            cd {self.base_dir}/build/autoconf
            make install
            """, sudo=True)
        self.run(f"""
            cd {self.base_dir}
            mv automake-* automake
            mkdir -p build/automake
            cd build/automake
            ../../automake/configure --prefix="{self.prefix}"
            make -j
            """)
        self.run(f"""
            cd {self.base_dir}/build/automake
            make install
            """, sudo=True)
        self.run(f"""
            cd {self.base_dir}
            mv libtool-* libtool
            mkdir -p build/libtool
            cd build/libtool
            ../../libtool/configure --prefix="{self.prefix}"
            make -j
            """)
        self.run(f"""
            cd {self.base_dir}/build/libtool
            make install
            """, sudo=True)
        if not self.keep:
            paella.rm_rf(self.base_dir)

    def debian(self):
        pass

    def redhat_compat(self):
        pass

    def amzn(self):
        pass

    def fedora(self):
        pass

    def archlinux(self):
        pass

    def alpine(self):
        pass

    def macos(self):
        if self.modern:
            pass
        else:
            if sh('xcode-select -p') == '':
                fatal("Xcode tools are not installed. Please run xcode-select --install.")
                # install brew (which will install Xcode command line tools):
                # self.run("/bin/bash -c '$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)'", sudo=True)

#----------------------------------------------------------------------------------------------

parser = argparse.ArgumentParser(description='Set up GCC build environemnt.')
parser.add_argument('--modern', action="store_true", help="Install modern GCC version")
parser.add_argument('--keep', action="store_true", help="Do not remove source files and build artifacts")
parser.add_argument('-n', '--nop', action="store_true", help='No operation')
parser.add_argument('-V', '--verbose', action="store_true", help="Verbose operation")

args = parser.parse_args()
SystemSetup(args).setup()

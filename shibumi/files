
if [[ $(platform_os) == macos ]]; then

realpath() {
	[[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

fi # macos

#----------------------------------------------------------------------------------------------

is_abspath() {
	case $1 in (/*) pathchk -- "$1";; (*) ! : ;; esac
}

abspath() {
    local path="$1"
    if [[ -z "$path" ]]; then
        echo ""
	else
		echo "$(cd "$(dirname "$path")" && pwd)/$(basename "$path")"
    fi
}

#----------------------------------------------------------------------------------------------

_pushd() {
	pushd $1 > /dev/null
}

_popd() {
	popd > /dev/null
}

#----------------------------------------------------------------------------------------------

temp_files=()

declare -ga temp_files

# this cannot be called in a subshell, i.e. $(mk_temp)
mk_temp() {
	local prefix="$1"
	local suffix="$2"
	[[ -z $prefix ]] && prefix=temp
	FILE="$(mktemp "/tmp/${prefix}.XXXXXX${suffix}")"
	temp_files+=("$FILE")
}

cleanup_temp_files() {
	if [[ $KEEP = 1 ]]; then
		eprint "temporary files are retained: ${temp_files[@]}"
		return
	fi
    for f in "${temp_files[@]}"; do
        [[ -f $f ]] && rm -f "$f"
		# echo "removed $f"
    done
}

add_exit_trap cleanup_temp_files

#----------------------------------------------------------------------------------------------

# PREFIX: filename prefix
# SUFFIX: filename suffix
# $1: var name for filename (default: "FILE")

heredoc() {
	local var="$1"
	[[ -z $var ]] && var=FILE
	local prefix="$PREFIX"
	[[ -z $prefix ]] && prefix=heredoc
	mk_temp "$prefix" $SUFFIX
	cat > $FILE
	declare -g "$var=$FILE"
}

#----------------------------------------------------------------------------------------------

win_homedir() {
    if [[ $(platform_os) != 'windows' ]]; then
        echo $HOME
	fi
    cygpath -m $USERPROFILE
}

#!/usr/bin/env python

import sys
import os
import argparse
import getpass
from pathlib import Path

HERE = os.path.dirname(__file__)
ROOT = os.path.abspath(os.path.join(HERE, ".."))
sys.path.insert(0, ROOT)
import paella

#----------------------------------------------------------------------------------------------

class DockerSetup(paella.Setup):
    def __init__(self, args):
        paella.Setup.__init__(self, nop=args.nop)
        self.no_exp = args.no_exp

        if args.remote_host:
            if not args.remote_user or not args.remote_key:
                raise paella.Error("remote host requires remote user and remote key")

            if not Path(args.remote_key).exists():
                raise paella.Error(f"remote key file not found: {args.remote_key}")

            self.remote_host = args.remote_host
            self.remote_user = args.remote_user
            self.remote_key = args.remote_key

    def debian_compat(self):
        self.run("bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)", sudo="file")

        # self.install("apt-transport-https ca-certificates curl gnupg-agent software-properties-common lsb-release")
        # self.run("curl -fsSL https://download.docker.com/linux/{}/gpg | apt-key add -".format(self.dist), sudo=True)
        # self.add_repo("'deb [arch=amd64] https://download.docker.com/linux/debian {} stable'".format(sh("lsb_release -cs")))
        # self.run("apt-get -qq update", sudo=True)
        # self.install("docker-ce docker-ce-cli containerd.io")

    def redhat_compat(self):
        self.install("yum-utils device-mapper-persistent-data lvm2")
        self.install("http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.107-3.el7.noarch.rpm")
        self.add_repo("https://download.docker.com/linux/centos/docker-ce.repo")
        self.install("docker-ce docker-ce-cli containerd.io")
        if self.sh(f"{ROOT}/bin/iscontainer") == "1":
            return
        self.run("systemctl start docker", sudo=True)
        self.run("systemctl enable docker", sudo=True)

    def fedora(self):
        self.run("bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)", sudo="file")

    def linux_last(self):
        # enable running docker as non-root user
        self.run("groupadd docker || true", sudo=True)
        self.run(f"usermod -aG docker {getpass.getuser()} || true", sudo=True)
        if os.path.exists("/var/run/docker.sock"):
            self.run(f"chmod 660 /var/run/docker.sock", sudo=True)
            self.run(f"chown root:docker /var/run/docker.sock", sudo=True)

        if self.no_exp:
            return
        self.install("jq moreutils")

        # client
        self.run("mkdir -p ~/.docker")
        self.run("if [ ! -f ~/.docker/config.json ]; then echo '{}' >  ~/.docker/config.json; fi")
        self.run("jq '.experimental = \"enabled\"' ~/.docker/config.json | sponge ~/.docker/config.json")

        # remote context
        if self.remote_host:
            self.setup_remote_host()

        # server
        if paella.sh(f"{ROOT}/bin/iscontainer") == "1":
            return
        self.run("if [ ! -f /etc/docker/daemon.json ]; then mkdir -p /etc/docker; echo '{}' >  /etc/docker/daemon.json; fi", sudo="file")
        self.run("jq '.experimental = true' /etc/docker/daemon.json | sponge /etc/docker/daemon.json", sudo="file")
        if self.is_command("systemctl"):
            self.run("systemctl restart docker", sudo=True)
        else:
            self.run("service docker restart", sudo=True)

    def setup_remote_host(self):
        if (Path.home()/".ssh/docker/id_rsa").exists():
            raise paella.Error("remote docker key (~/.ssh/docker/id_rsa) exists, not overwriting it.")
        
        self.run("mkdir -p ~/.ssh/docker")
        self.run(f'cp "{self.remote_key}" ~/.ssh/docker/id_rsa')
        self.run("chmod 400 ~/.ssh/docker/id_rsa")

        paella.mkdir_p(Path.home()/".ssh/config.d")
        docker_config = Path.home()/".ssh/config.d/docker.conf"
        if not docker_config.exists():
            paella.fwrite(docker_config, HH(f"""
                Host {self.remote_host}
                    HostName {self.remote_host}
                    User {self.remote_user}
                    IdentityFile ~/.ssh/docker/id_rsa
                """))
        self.run(f"chmod 400 {docker_config}")

        found_include = False
        ssh_config = Path.home()/".ssh/config"
        try:
            with open(ssh_config, "r") as f:
                for line in f:
                    if "Include ~/.ssh/config.d/*.conf" in line:
                        found_include = True
                        break
        except:
            pass
        if not found_include:
            paella.fappend(ssh_config, HH(r"""
                Include ~/.ssh/config.d/*.conf
                """))
    
        self.run(f"docker context create local --docker \"host=unix:///var/run/docker.sock\"")
        self.run(f"docker context create remote --docker \"host=ssh://{self.remote_user}@{self.remote_host}\"")
        self.run("docker context use remote")

#----------------------------------------------------------------------------------------------

class DockerComposeSetup(paella.Setup):
    def __init__(self, args):
        paella.Setup.__init__(self, nop=args.nop)

    def common_first(self):
        self.pip_install("docker-compose")

#----------------------------------------------------------------------------------------------

parser = argparse.ArgumentParser(description='Install Docker CE')
parser.add_argument('-n', '--nop', action="store_true", help='no operation')
parser.add_argument('--just-enable-exp', action="store_true", help='no install, just enable experimental features')
parser.add_argument('--no-exp', action="store_true", help="don't enable experimental features")
parser.add_argument('--compose', action="store_true", help='install Docker Compose')
parser.add_argument('--just-compose', action="store_true", help='just install Docker Compose')
parser.add_argument('--remote-host', type=str, help='Remote docker host')
parser.add_argument('--remote-user', type=str, help='Username for remote docker host SSH access')
parser.add_argument('--remote-key', type=str, help='Private key file for remote docker host SSH access')

args = parser.parse_args()

if not args.just_compose:
    DockerSetup(args).setup()
if args.compose or args.just_compose:
    DockerComposeSetup(args).setup()
